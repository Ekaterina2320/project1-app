import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
  useReactTable,
  getCoreRowModel,
  flexRender,
  getSortedRowModel,
} from '@tanstack/react-table';
import {
  fetchFeedbacks,
  deleteFeedback,
  blockFeedback,
} from '../redux/feedbackSlice';
import { Paper, Typography, Box, IconButton } from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import BlockIcon from '@mui/icons-material/Block';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
const DraggableHeader = ({ header, moveColumn }) => {
  const ref = React.useRef(null);
// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ `useDrop` –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
  const [, drop] = useDrop({
    accept: 'column', // –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å
    hover(item) {
      if (!ref.current) return;
      const dragIndex = item.index; // –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–π –∫–æ–ª–æ–Ω–∫–∏
      const hoverIndex = header.index; // –ò–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞–¥ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫—É—Ä—Å–æ—Ä
      if (dragIndex === hoverIndex) return; // –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      moveColumn(dragIndex, hoverIndex); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–æ–ª–æ–Ω–∫—É
      item.index = hoverIndex; // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    },
  });
 // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ `useDrag` –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
  const [{ isDragging }, drag] = useDrag({
    type: 'column',
    item: { index: header.index },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  });
// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∏ —Å–±—Ä–æ—Å –∫ —ç–ª–µ–º–µ–Ω—Ç—É
  drag(drop(ref));

  return (
    <th
      ref={ref}
      style={{
        opacity: isDragging ? 0.5 : 1,
        cursor: header.column.getCanSort() ? 'pointer' : 'move',
        padding: '12px',
        borderBottom: '2px solid #ddd',
        textAlign: 'left',
        backgroundColor: '#f5f5f5',
      }}
      onClick={header.column.getToggleSortingHandler()}
    >
      {flexRender(header.column.columnDef.header, header.getContext())}
      {{
        asc: ' üîº',
        desc: ' üîΩ',
      }[header.column.getIsSorted()] ?? null}
    </th>
  );
};
// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞–º–∏
const AdminFeedbacks = () => {
  const dispatch = useDispatch();
  const { items: feedbacks, loading, error } = useSelector((state) => state.feedbacks);
  const [sorting, setSorting] = useState([]);
  const [columnOrder, setColumnOrder] = useState(
    ['id', 'author', 'title', 'message', 'date', 'isBlocked', 'actions']
  );

  useEffect(() => {
    if (!feedbacks || feedbacks.length === 0) {
      dispatch(fetchFeedbacks());// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    }
  }, [dispatch]); // –¢–æ–ª—å–∫–æ dispatch –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
  const handleDelete = (id) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤?')) {
      dispatch(deleteFeedback(id));
    }
  };
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–∑—ã–≤–∞
  const handleBlock = (id, isBlocked) => {
    dispatch(blockFeedback({ id, isBlocked }));
  };
// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
  const columns = [
    {
      accessorKey: 'id',
      header: 'ID',
      enableSorting: true,
    },
    {
      accessorKey: 'author',
      header: '–ê–≤—Ç–æ—Ä',
      enableSorting: true,
    },
    {
      accessorKey: 'title',
      header: '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
      enableSorting: true,
    },
    {
      accessorKey: 'message',
      header: '–°–æ–æ–±—â–µ–Ω–∏–µ',
      cell: ({ getValue }) => (
        <div style={{ maxWidth: '300px', overflow: 'hidden', textOverflow: 'ellipsis' }}>
          {getValue()}
        </div>
      ),
    },
    {
      accessorKey: 'date',
      header: '–î–∞—Ç–∞',
      cell: ({ getValue }) => (
        <span>
          {new Date(getValue()).toLocaleString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
          })}
        </span>
      ),
      enableSorting: true,
    },
    {
      accessorKey: 'isBlocked',
      header: '–°—Ç–∞—Ç—É—Å',
      cell: ({ getValue }) => (
        <span
          style={{
            color: getValue() ? 'red' : 'green',
            fontWeight: 'bold',
          }}
        >
          {getValue() ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '–ê–∫—Ç–∏–≤–µ–Ω'}
        </span>
      ),
      enableSorting: true,
    },
    {
      header: '–î–µ–π—Å—Ç–≤–∏—è',
      cell: ({ row }) => (
        <div style={{ display: 'flex', gap: '8px' }}>
        {/* –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ */}
          <IconButton color="error" onClick={() => handleDelete(row.original.id)}>
            <DeleteIcon />
          </IconButton>
          <IconButton
            color={row.original.isBlocked ? 'success' : 'warning'}
            onClick={() => handleBlock(row.original.id, !row.original.isBlocked)}
          >
            <BlockIcon />
          </IconButton>
        </div>
      ),
    },
  ];
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
  const table = useReactTable({
    data: feedbacks || [], // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    columns, // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    getCoreRowModel: getCoreRowModel(), // –ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
    getSortedRowModel: getSortedRowModel(), // –ú–æ–¥–µ–ª—å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫
    state: {
      sorting, // –¢–µ–∫—É—â–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      columnOrder, // –¢–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
    },
    onSortingChange: setSorting, // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    onColumnOrderChange: setColumnOrder, // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
  });

  if (loading) return <Typography>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤...</Typography>;
  if (error) return <Typography color="error">–û—à–∏–±–∫–∞: {error}</Typography>;

  return (
    <DndProvider backend={HTML5Backend}>
      <Paper elevation={3} sx={{ p: 3, maxWidth: 1200, mx: 'auto', mt: 4 }}>
        <Typography variant="h4" gutterBottom sx={{ mb: 3 }}>
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏
        </Typography>
        <Box sx={{ overflowX: 'auto' }}>
          <table style={{ width: '100%', borderCollapse: 'collapse' }}>
            <thead>
              {table.getHeaderGroups().map((headerGroup) => (
                <tr key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <DraggableHeader
                      key={header.id}
                      header={header}
                      moveColumn={(dragIndex, hoverIndex) => {
                        const newOrder = [...columnOrder];
                        const [removed] = newOrder.splice(dragIndex, 1);
                        newOrder.splice(hoverIndex, 0, removed);
                        setColumnOrder(newOrder);
                      }}
                    />
                  ))}
                </tr>
              ))}
            </thead>
            <tbody>
              {table.getRowModel().rows.map((row) => (
                <tr key={row.id}>
                  {row.getVisibleCells().map((cell) => (
                    <td
                      key={cell.id}
                      style={{
                        padding: '12px',
                        borderBottom: '1px solid #ddd',
                      }}
                    >
                      {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–µ–∫ */}
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </Box>
      </Paper>
    </DndProvider>
  );
};

export default AdminFeedbacks;